sequence(e) ::= "<e; separator=\"\n\">"
sequenceSpaced(e) ::= "<e; separator=\"\n\n\">"

str(s) ::= "<s>"

strConstant(i, size, len, str) ::= <<
str_const<i>:
    .word   3
    .word   <size>
    .word   String_dispTab
    .word   <len>
    .asciiz <str>
    .align  2
>>

intConstant(i, n) ::= <<
int_const<i>:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   <n>
>>

word(val) ::= <<
    .word   <val>
>>

classDisptachTab(name, methods) ::= <<
<name>_dispTab:
<methods; separator="\n">
>>

classPrototype(name, i, size, attributes) ::= <<
<name>_protObj:
    .word   <i>
    .word   <size>
    .word   <name>_dispTab
<attributes>
>>

classInit(name, parent, fieldsInits) ::= <<
<name>_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     <parent>_init
<fieldsInits>
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
>>

fieldInit(expr, offset) ::= <<
<expr>
    sw      $a0 <offset>($s0)
>>

variableInit(expr, offset) ::= <<
<expr>
    sw      $a0 <offset>($fp)
>>

newObject(name) ::= <<
    la      $a0 <name>_protObj
    jal     Object.copy
    jal     <name>_init
>>

newSELF_TYPE() ::= <<
    la      $t1 class_objTab    
    lw      $t2 0($s0)          # class tag
    sll     $t2 $t2 3           # *8
    addu    $t1 $t1 $t2         # class_objTab + 8 * tag
    sw      $t1 0($sp)
    addiu   $sp $sp -4
    lw      $a0 0($t1)          # _protObj
    jal     Object.copy
    lw      $t1 4($sp)
    addiu   $sp $sp 4
    lw      $t1 4($t1)          # _init
    jalr    $t1
>>

methodDefine(label, expression, paramsSize) ::= <<
<label>:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
<expression>
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
<if (paramsSize)>
    addiu   $sp $sp <paramsSize> # params free
<endif>
    jr      $ra
>>

returnAddres(addr) ::= <<
    la      $a0 <addr>
>>

returnSelf() ::= <<
    move    $a0 $s0
>>

dispatch(i, filename, methodOffset, callerAddress, arguments, fileline, staticTable) ::= <<
<arguments>
<if (callerAddress)>
<callerAddress>
<else>
    move    $a0 $s0
<endif>
    bnez    $a0 dispatch<i>
    la      $a0 <filename>
    li      $t1 <fileline>
    jal     _dispatch_abort
dispatch<i>:
<if (staticTable)>
    la      $t1 <staticTable>   # dispatch table
<else>
    lw      $t1 8($a0)   # dispatch table
<endif>
    lw      $t1 <methodOffset>($t1)   # method offset
    jalr    $t1
>>

loadWordFromClass(offset) ::= <<
    lw      $a0 <offset>($s0)
>>

saveWordInClass(offset) ::= <<
    sw      $a0 <offset>($s0)
>>

loadWordFromArguments(offset) ::= <<
    lw      $a0 <offset>($fp)
>>

saveWordInArguments(offset) ::= <<
    sw      $a0 <offset>($fp)
>>

putWordOnStack(address) ::= <<
<address>
    sw      $a0 0($sp)
    addiu   $sp $sp -4
>>

localVarBlock(varSizes, initializations, body) ::= <<
    addiu   $sp $sp -<varSizes>   # locals alloc
<initializations>
<body>
    addiu   $sp $sp <varSizes>    # locals free
>>

branch(i, condition, consequent, alternative) ::= <<
<condition>
    lw      $t1 12($a0)
    beqz    $t1 else<i>
<consequent>
    b       endif<i>
else<i>:
<alternative>
endif<i>:
>>

isvoid(i, expression) ::= <<
<expression>
    move    $t1 $a0
    la      $a0 bool_const1
    beqz    $t1 isvoid<i>
    la      $a0 bool_const0
isvoid<i>:
>>

not(i, expression) ::= <<
<expression>
    lw      $t1 12($a0)     # bool slot
    la      $a0 bool_const1
    beqz    $t1 not<i>
    la      $a0 bool_const0
not<i>:
>>
program(strConstants, intConstants, classNameTabs, classObjTabs, classProtObjs, classDispatchTabs, classInits, methodDefines) ::= <<
    .data
    .align  2
    .globl  class_nameTab
    .globl  Int_protObj
    .globl  String_protObj
    .globl  bool_const0
    .globl  bool_const1
    .globl  Main_protObj
    .globl  _int_tag
    .globl  _string_tag
    .globl  _bool_tag
_int_tag:
    .word   2
_string_tag:
    .word   3
_bool_tag:
    .word   4
str_const0:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const0
    .asciiz ""
    .align  2
str_const1:
    .word   3
    .word   6
    .word   String_dispTab
    .word   int_const1
    .asciiz "Object"
    .align  2
str_const2:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const2
    .asciiz "IO"
    .align  2
str_const3:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const3
    .asciiz "Int"
    .align  2
str_const4:
    .word   3
    .word   6
    .word   String_dispTab
    .word   int_const1
    .asciiz "String"
    .align  2
str_const5:
    .word   3
    .word   6
    .word   String_dispTab
    .word   int_const4
    .asciiz "Bool"
    .align  2
<strConstants>
int_const0:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   0
int_const1:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   6
int_const2:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   2
int_const3:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   3
int_const4:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   4
<intConstants>
bool_const0:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   0
bool_const1:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   1
class_nameTab:
    .word   str_const1
    .word   str_const2
    .word   str_const3
    .word   str_const4
    .word   str_const5
<classNameTabs>
class_objTab:
    .word   Object_protObj
    .word   Object_init
    .word   IO_protObj
    .word   IO_init
    .word   Int_protObj
    .word   Int_init
    .word   String_protObj
    .word   String_init
    .word   Bool_protObj
    .word   Bool_init
<classObjTabs>
Object_protObj:
    .word   0
    .word   3
    .word   Object_dispTab

IO_protObj:
    .word   1
    .word   3
    .word   IO_dispTab

Int_protObj:
    .word   2
    .word   4
    .word   Int_dispTab
    .word   0
String_protObj:
    .word   3
    .word   5
    .word   String_dispTab
    .word   int_const0
    .asciiz ""
    .align  2
Bool_protObj:
    .word   4
    .word   4
    .word   Bool_dispTab
    .word   0
<classProtObjs>
Object_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
IO_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
    .word   IO.out_string
    .word   IO.out_int
    .word   IO.in_string
    .word   IO.in_int
Int_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
String_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
    .word   String.length
    .word   String.concat
    .word   String.substr
Bool_dispTab:
    .word   Object.abort
    .word   Object.type_name
    .word   Object.copy
<classDispatchTabs>
    .globl  heap_start
heap_start:
    .word   0
    .text
    .globl  Int_init
    .globl  String_init
    .globl  Bool_init
    .globl  Main_init
    .globl  Main.main
Object_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
IO_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
Int_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
String_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
Bool_init:
    addiu   $sp $sp -12
    sw      $fp 12($sp)
    sw      $s0 8($sp)
    sw      $ra 4($sp)
    addiu   $fp $sp 4
    move    $s0 $a0
    jal     Object_init
    move    $a0 $s0
    lw      $fp 12($sp)
    lw      $s0 8($sp)
    lw      $ra 4($sp)
    addiu   $sp $sp 12
    jr      $ra
<classInits>
<methodDefines>
>>